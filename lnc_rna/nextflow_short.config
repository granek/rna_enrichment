
// old paramters 


//process.container = 'docker://nfcore/lncpipe'
params.container = 'docker://nfcore/lncpipe'
singularity {
    enabled = true
    autoMounts = true
}


params {
/*
    User setting options (mandatory)
     */
// input file and genome reference()
    species="Cryptococcus_neoformans"
    input_folder='/space/hts2018/rawdata/hts_2019_data/hts2019_pilot_rawdata/'
    fastq_ext = '*_2018_P_H?_S28_L002_R1_001.fastq.gz'
    design = null
    hisat2_index = null
    cpatpath='/opt/CPAT-1.2.3'
    //human gtf only
    //gencode_annotation_gtf = "/data/database/hg38/Annotation/gencode.v24.annotation.gtf"
    //lncipedia_gtf = "/data/database/hg38/Annotation/lncipedia_4_0_hg38.gtf" // set "null" if you are going to perform analysis on other species
// additional options for non-human species
/*
    known_coding_gtf= "/space/hts2018/workspace/LncPipe/genome/Cryptococcus_neoformans_var_grubii_h99_gca_000149245_protein_coding.CNA3.46.gtf"
    known_lncRNA_gtf= "/space/hts2018/workspace/LncPipe/genome/Cryptococcus_neoformans_var_grubii_h99_gca_000149245_ncRNA.CNA3.46.gtf"
    fasta_ref = '/space/hts2018/workspace/LncPipe/genome/Cryptococcus_neoformans_var_grubii_h99_gca_000149245.CNA3.dna.toplevel.fa'
     */


/*
    User setting options (optional)
     */
    //tools settings
    //hisat_strand = 'RF'
    star_index = '/space/temp/run_lnc_pipe_001/genome'
    //bowtie2_index = null
    aligner = "star"
    //sam_processor="sambamba"//or "samtools(deprecated)"
    qctools ="fastqc"
    detools = "deseq2"
    //quant = "kallisto"// or 'htseq'

    //other settings
    singleEnd = true
    unstrand = false
    skip_combine = false
    lncRep_Output = 'reporter.html'
    lncRep_theme = 'npg'
    lncRep_cdf_percent = 10
    lncRep_max_lnc_len = 10000
    lncRep_min_expressed_sample = 50
    mem = 60
    cpus = 10
}

manifest {
    homePage = 'https//github.com/likelet/LncPipe'
    description = 'LncPipe:a Nextflow-based Long non-coding RNA analysis PIPELINE'
    mainScript = 'LncRNAanalysisPipe.nf'
}

// individual process setting
process.cache = 'deep'
process {


    withLabel: para {
        maxForks = 6
    }

    withLabel: 'qc' {
        maxForks = 6
    }

}

// use profile 


profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  docker {
    includeConfig 'conf/base.config'
    includeConfig 'conf/docker.config'
  }
  
  singularity {
    includeConfig 'conf/base.config'
    includeConfig 'conf/sing.config'
  }
  
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }
  
  debug { process.beforeScript = 'echo $HOSTNAME' }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}